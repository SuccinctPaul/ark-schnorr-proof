use ark_bn254::{Fr, G1Projective};
use ark_ec::PrimeGroup;
use ark_ff::{UniformRand, Zero};

fn main() {
    let rng = &mut rand::thread_rng();
    println!("=======Setup");
    println!("Setup: Verifier(G), G: Generator of Group");
    let g = G1Projective::generator();
    println!("Setup: Prover(G,s), G: Generator of Group, s: Secret witness");
    let g = G1Projective::generator();
    let s = Fr::rand(rng);

    println!("\nProver -> Verifier: commitment c=g^s");
    let c = g * s;

    println!("\nProver -> Verifier: commitment x=g^r, where r is random value generated by prover");
    let r = Fr::rand(rng);
    let x = g * r;

    println!("\nVerifier -> Prover: generate a challenge value e");
    let e = Fr::rand(rng);

    println!("\nProver -> Verifier: opening proof, y= r +  s*e");
    let y = r + s * e;

    println!("\n Verifier: check g^y = c * x^e");
    assert_eq!(g * y, x + c * e);
    println!("\nSuccess to verify the proof");
}
